<?php
/**
 * –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–º–µ–Ω–æ–º —Å 1–°
 * –ü—É—Ç—å: /bitrix/admin/1c_exchange_admin.php
 * –í–µ—Ä—Å–∏—è: 1.0
 * –î–∞—Ç–∞: 2025-01-21
 */

require_once($_SERVER["DOCUMENT_ROOT"]."/bitrix/modules/main/include/prolog_admin_before.php");

if (!$USER->IsAdmin()) {
	$APPLICATION->AuthForm("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω");
}

require_once($_SERVER["DOCUMENT_ROOT"]."/bitrix/modules/main/include/prolog_admin_after.php");

$APPLICATION->SetTitle("–û–±–º–µ–Ω —Å 1–° - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ");

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π
CModule::IncludeModule("iblock");
CModule::IncludeModule("catalog");

$logFile = $_SERVER["DOCUMENT_ROOT"]."/upload/1c_exchange.log";
$uploadDir = $_SERVER["DOCUMENT_ROOT"]."/upload/1c_catalog/";

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
if ($_POST['action']) {
	switch ($_POST['action']) {
		case 'clear_log':
			if (file_exists($logFile)) {
				file_put_contents($logFile, '');
				ShowMessage("–õ–æ–≥-—Ñ–∞–π–ª –æ—á–∏—â–µ–Ω");
			}
			break;

		case 'clear_files':
			if (is_dir($uploadDir)) {
				$files = glob($uploadDir . "*.xml");
				foreach ($files as $file) {
					unlink($file);
				}
				ShowMessage("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã (" . count($files) . " —Ñ–∞–π–ª–æ–≤)");
			}
			break;

		case 'recreate_iblock':
			$result = recreateCatalogIBlock();
			if ($result) {
				ShowMessage("–ò–Ω—Ñ–æ–±–ª–æ–∫ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω —Å ID: " . $result);
			} else {
				ShowError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ñ–æ–±–ª–æ–∫–∞");
			}
			break;

		case 'reindex_catalog':
			$iblockId = getCatalogIBlockId();
			if ($iblockId) {
				CSearch::ReIndexAll(false, $iblockId, "iblock");
				ShowMessage("–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞");
			}
			break;
	}
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
$stats = getExchangeStatistics();
?>

	<style>
        .exchange-admin-panel { margin: 20px 0; }
        .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 20px 0; }
        .stat-card { background: #f8f9fa; padding: 15px; border-radius: 5px; border-left: 4px solid #007bff; }
        .stat-card h4 { margin: 0 0 5px 0; color: #333; }
        .stat-card .value { font-size: 24px; font-weight: bold; color: #007bff; }
        .log-container { background: #1e1e1e; color: #f8f8f2; padding: 15px; border-radius: 5px; max-height: 400px; overflow-y: auto; font-family: monospace; }
        .actions-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; }
        .action-card { background: #fff; border: 1px solid #ddd; border-radius: 5px; padding: 15px; }
        .btn-action { margin: 5px 5px 5px 0; }
        .error-log { color: #ff6b6b; }
        .warning-log { color: #ffd93d; }
        .success-log { color: #51cf66; }
	</style>

	<div class="exchange-admin-panel">

		<!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
		<h2>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–º–µ–Ω–∞</h2>
		<div class="stats-grid">
			<div class="stat-card">
				<h4>–¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ</h4>
				<div class="value"><?= number_format($stats['products']) ?></div>
			</div>
			<div class="stat-card">
				<h4>–†–∞–∑–¥–µ–ª–æ–≤ –∫–∞—Ç–∞–ª–æ–≥–∞</h4>
				<div class="value"><?= number_format($stats['sections']) ?></div>
			</div>
			<div class="stat-card">
				<h4>–¢–∏–ø–æ–≤ —Ü–µ–Ω</h4>
				<div class="value"><?= number_format($stats['price_types']) ?></div>
			</div>
			<div class="stat-card">
				<h4>–°–∫–ª–∞–¥–æ–≤</h4>
				<div class="value"><?= number_format($stats['stores']) ?></div>
			</div>
			<div class="stat-card">
				<h4>–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–±–º–µ–Ω</h4>
				<div class="value" style="font-size: 14px;"><?= $stats['last_exchange'] ?></div>
			</div>
			<div class="stat-card">
				<h4>–†–∞–∑–º–µ—Ä –ª–æ–≥–∞</h4>
				<div class="value" style="font-size: 16px;"><?= $stats['log_size'] ?></div>
			</div>
		</div>

		<!-- –î–µ–π—Å—Ç–≤–∏—è -->
		<h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</h2>
		<div class="actions-grid">

			<div class="action-card">
				<h3>üóÇÔ∏è –§–∞–π–ª—ã –æ–±–º–µ–Ω–∞</h3>
				<p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ XML —Ñ–∞–π–ª–∞–º–∏</p>
				<form method="post" style="display: inline;">
					<input type="hidden" name="action" value="clear_files">
					<input type="submit" value="–û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã" class="btn btn-danger btn-action"
					       onclick="return confirm('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ XML —Ñ–∞–π–ª—ã?')">
				</form>
				<a href="#files-list" class="btn btn-info btn-action" onclick="toggleFilesList()">–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã</a>
			</div>

			<div class="action-card">
				<h3>üìã –õ–æ–≥–∏ –æ–±–º–µ–Ω–∞</h3>
				<p>–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ –æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤</p>
				<form method="post" style="display: inline;">
					<input type="hidden" name="action" value="clear_log">
					<input type="submit" value="–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥" class="btn btn-danger btn-action"
					       onclick="return confirm('–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥-—Ñ–∞–π–ª?')">
				</form>
				<a href="#log-viewer" class="btn btn-info btn-action" onclick="toggleLog()">–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥</a>
			</div>

			<div class="action-card">
				<h3>üèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞</h3>
				<p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ–±–ª–æ–∫–æ–º –∫–∞—Ç–∞–ª–æ–≥–∞</p>
				<form method="post" style="display: inline;">
					<input type="hidden" name="action" value="recreate_iblock">
					<input type="submit" value="–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ò–ë" class="btn btn-warning btn-action"
					       onclick="return confirm('–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ñ–æ–±–ª–æ–∫ –∫–∞—Ç–∞–ª–æ–≥–∞? –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!')">
				</form>
				<a href="/bitrix/admin/iblock_admin.php?type=1c_catalog" class="btn btn-info btn-action" target="_blank">–û—Ç–∫—Ä—ã—Ç—å –ò–ë</a>
			</div>

			<div class="action-card">
				<h3>üîç –ü–æ–∏—Å–∫ –∏ –∏–Ω–¥–µ–∫—Å—ã</h3>
				<p>–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞</p>
				<form method="post" style="display: inline;">
					<input type="hidden" name="action" value="reindex_catalog">
					<input type="submit" value="–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å" class="btn btn-success btn-action">
				</form>
				<a href="/bitrix/admin/search_reindex.php" class="btn btn-info btn-action" target="_blank">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞</a>
			</div>

			<div class="action-card">
				<h3>‚öôÔ∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞</h3>
				<p>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–±–º–µ–Ω–∞</p>
				<button onclick="runDiagnostics()" class="btn btn-primary btn-action">–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É</button>
				<a href="1c_exchange_diagnostics_v1.0.php" class="btn btn-info btn-action" target="_blank">–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞</a>
			</div>

			<div class="action-card">
				<h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–º–µ–Ω–∞</h3>
				<p>–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</p>
				<button onclick="showDetailedStats()" class="btn btn-primary btn-action">–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</button>
				<button onclick="exportStats()" class="btn btn-success btn-action">–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel</button>
			</div>

		</div>

		<!-- –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ -->
		<div id="files-list" style="display: none; margin-top: 20px;">
			<h3>–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã</h3>
			<div id="files-content">
				<?= getFilesList() ?>
			</div>
		</div>

		<!-- –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–∞ -->
		<div id="log-viewer" style="display: none; margin-top: 20px;">
			<h3>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ <button onclick="refreshLog()" class="btn btn-sm btn-info">–û–±–Ω–æ–≤–∏—Ç—å</button></h3>
			<div id="log-content" class="log-container">
				<?= getLogContent() ?>
			</div>
		</div>

		<!-- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ -->
		<div id="diagnostics-result" style="display: none; margin-top: 20px;">
			<h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏</h3>
			<div id="diagnostics-content" class="log-container">
			</div>
		</div>

		<!-- –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
		<div id="detailed-stats" style="display: none; margin-top: 20px;">
			<h3>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
			<div id="detailed-stats-content">
			</div>
		</div>

	</div>

	<script>
        function toggleFilesList() {
            const div = document.getElementById('files-list');
            div.style.display = div.style.display === 'none' ? 'block' : 'none';
        }

        function toggleLog() {
            const div = document.getElementById('log-viewer');
            div.style.display = div.style.display === 'none' ? 'block' : 'none';
        }

        function refreshLog() {
            fetch('1c_exchange_admin_v1.0.php?ajax=get_log')
                .then(response => response.text())
                .then(data => {
                    document.getElementById('log-content').innerHTML = data;
                });
        }

        function runDiagnostics() {
            const div = document.getElementById('diagnostics-result');
            const content = document.getElementById('diagnostics-content');

            div.style.display = 'block';
            content.innerHTML = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞...';

            fetch('1c_exchange_diagnostics_v1.0.php?ajax=1')
                .then(response => response.json())
                .then(data => {
                    content.innerHTML = data.output.replace(/\n/g, '<br>');
                })
                .catch(error => {
                    content.innerHTML = '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ' + error;
                });
        }

        function showDetailedStats() {
            const div = document.getElementById('detailed-stats');
            const content = document.getElementById('detailed-stats-content');

            div.style.display = 'block';
            content.innerHTML = '–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...';

            fetch('1c_exchange_admin_v1.0.php?ajax=detailed_stats')
                .then(response => response.text())
                .then(data => {
                    content.innerHTML = data;
                });
        }

        function exportStats() {
            window.open('1c_exchange_admin_v1.0.php?ajax=export_stats', '_blank');
        }

        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        setInterval(() => {
            location.reload();
        }, 30000);
	</script>

<?php

// AJAX –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
if (isset($_GET['ajax'])) {
	switch ($_GET['ajax']) {
		case 'get_log':
			echo getLogContent();
			break;
		case 'detailed_stats':
			echo getDetailedStatistics();
			break;
		case 'export_stats':
			exportStatisticsToExcel();
			break;
	}
	exit;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±–º–µ–Ω–∞
 */
function getExchangeStatistics() {
	global $logFile;

	$stats = array(
		'products' => 0,
		'sections' => 0,
		'price_types' => 0,
		'stores' => 0,
		'last_exchange' => '–ù–∏–∫–æ–≥–¥–∞',
		'log_size' => '0 B'
	);

	// –ü–æ–¥—Å—á–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤
	$iblockId = getCatalogIBlockId();
	if ($iblockId) {
		$stats['products'] = CIBlockElement::GetList(
			array(),
			array("IBLOCK_ID" => $iblockId),
			array()
		);

		$stats['sections'] = CIBlockSection::GetList(
			array(),
			array("IBLOCK_ID" => $iblockId),
			false,
			array()
		);
	}

	// –¢–∏–ø—ã —Ü–µ–Ω
	$stats['price_types'] = CPrice::GetList()->SelectedRowsCount();

	// –°–∫–ª–∞–¥—ã
	$stats['stores'] = CCatalogStore::GetList()->SelectedRowsCount();

	// –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–±–º–µ–Ω –∏–∑ –ª–æ–≥–∞
	if (file_exists($logFile)) {
		$stats['log_size'] = formatBytes(filesize($logFile));

		$lines = file($logFile);
		if (!empty($lines)) {
			$lastLine = end($lines);
			if (preg_match('/\[([\d\-: ]+)\]/', $lastLine, $matches)) {
				$stats['last_exchange'] = $matches[1];
			}
		}
	}

	return $stats;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∏–Ω—Ñ–æ–±–ª–æ–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
 */
function getCatalogIBlockId() {
	$rsIBlock = CIBlock::GetList(array(), array('TYPE' => '1c_catalog', 'CODE' => '1c_catalog'));
	if ($arIBlock = $rsIBlock->Fetch()) {
		return $arIBlock['ID'];
	}
	return false;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ª–æ–≥–∞
 */
function getLogContent($lines = 50) {
	global $logFile;

	if (!file_exists($logFile)) {
		return "–õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω";
	}

	$content = file($logFile);
	if (empty($content)) {
		return "–õ–æ–≥-—Ñ–∞–π–ª –ø—É—Å—Ç–æ–π";
	}

	$recentLines = array_slice($content, -$lines);
	$output = '';

	foreach ($recentLines as $line) {
		$line = htmlspecialchars(trim($line));
		$class = '';

		if (strpos($line, 'ERROR') !== false) {
			$class = 'error-log';
		} elseif (strpos($line, 'WARNING') !== false) {
			$class = 'warning-log';
		} elseif (strpos($line, '—É—Å–ø–µ—à–Ω–æ') !== false) {
			$class = 'success-log';
		}

		$output .= "<div class='$class'>$line</div>";
	}

	return $output;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
 */
function getFilesList() {
	global $uploadDir;

	if (!is_dir($uploadDir)) {
		return "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞";
	}

	$files = glob($uploadDir . "*.xml");
	if (empty($files)) {
		return "–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã";
	}

	// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
	usort($files, function($a, $b) {
		return filemtime($b) - filemtime($a);
	});

	$output = "<table class='table table-striped'>";
	$output .= "<tr><th>–§–∞–π–ª</th><th>–†–∞–∑–º–µ—Ä</th><th>–î–∞—Ç–∞</th><th>–î–µ–π—Å—Ç–≤–∏—è</th></tr>";

	foreach ($files as $file) {
		$basename = basename($file);
		$size = formatBytes(filesize($file));
		$date = date('Y-m-d H:i:s', filemtime($file));

		$output .= "<tr>";
		$output .= "<td>$basename</td>";
		$output .= "<td>$size</td>";
		$output .= "<td>$date</td>";
		$output .= "<td><a href='/upload/1c_catalog/$basename' target='_blank'>–°–∫–∞—á–∞—Ç—å</a></td>";
		$output .= "</tr>";
	}

	$output .= "</table>";
	return $output;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
function getDetailedStatistics() {
	global $DB;

	$iblockId = getCatalogIBlockId();
	if (!$iblockId) {
		return "–ò–Ω—Ñ–æ–±–ª–æ–∫ –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω";
	}

	$output = "<div class='stats-grid'>";

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
	$query = "
        SELECT s.NAME, COUNT(e.ID) as cnt 
        FROM b_iblock_section s 
        LEFT JOIN b_iblock_element e ON s.ID = e.IBLOCK_SECTION_ID 
        WHERE s.IBLOCK_ID = $iblockId 
        GROUP BY s.ID, s.NAME 
        ORDER BY cnt DESC 
        LIMIT 10
    ";

	$result = $DB->Query($query);
	$sectionsData = array();

	while ($row = $result->Fetch()) {
		$sectionsData[] = $row;
	}

	if (!empty($sectionsData)) {
		$output .= "<div class='action-card'><h4>–¢–æ–≤–∞—Ä–æ–≤ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º</h4><table class='table'>";
		foreach ($sectionsData as $section) {
			$output .= "<tr><td>{$section['NAME']}</td><td>{$section['cnt']}</td></tr>";
		}
		$output .= "</table></div>";
	}

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–Ω
	$query = "
        SELECT cg.NAME, COUNT(p.ID) as cnt, AVG(p.PRICE) as avg_price
        FROM b_catalog_price p 
        JOIN b_catalog_group cg ON p.CATALOG_GROUP_ID = cg.ID
        GROUP BY cg.ID, cg.NAME
    ";

	$result = $DB->Query($query);
	$pricesData = array();

	while ($row = $result->Fetch()) {
		$pricesData[] = $row;
	}

	if (!empty($pricesData)) {
		$output .= "<div class='action-card'><h4>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–Ω</h4><table class='table'>";
		$output .= "<tr><th>–¢–∏–ø —Ü–µ–Ω—ã</th><th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th><th>–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞</th></tr>";
		foreach ($pricesData as $price) {
			$avgPrice = number_format($price['avg_price'], 2);
			$output .= "<tr><td>{$price['NAME']}</td><td>{$price['cnt']}</td><td>$avgPrice ‚ÇΩ</td></tr>";
		}
		$output .= "</table></div>";
	}

	$output .= "</div>";
	return $output;
}

/**
 * –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ–±–ª–æ–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
 */
function recreateCatalogIBlock() {
	// –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –ò–ë
	$rsIBlock = CIBlock::GetList(array(), array('TYPE' => '1c_catalog'));
	while ($arIBlock = $rsIBlock->Fetch()) {
		CIBlock::Delete($arIBlock['ID']);
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ
	require_once("1c_exchange_helpers_v1.0.php");
	return getOrCreateCatalogIBlock();
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ Excel
 */
function exportStatisticsToExcel() {
	header('Content-Type: application/vnd.ms-excel');
	header('Content-Disposition: attachment; filename="1c_exchange_stats_' . date('Y-m-d') . '.xls"');

	echo "<table border='1'>";
	echo "<tr><th>–ü–∞—Ä–∞–º–µ—Ç—Ä</th><th>–ó–Ω–∞—á–µ–Ω–∏–µ</th></tr>";

	$stats = getExchangeStatistics();
	foreach ($stats as $key => $value) {
		echo "<tr><td>$key</td><td>$value</td></tr>";
	}

	echo "</table>";
	exit;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
 */
function formatBytes($size, $precision = 2) {
	$base = log($size, 1024);
	$suffixes = array('B', 'KB', 'MB', 'GB', 'TB');

	return round(pow(1024, $base - floor($base)), $precision) . ' ' . $suffixes[floor($base)];
}

require_once($_SERVER["DOCUMENT_ROOT"]."/bitrix/modules/main/include/epilog_admin.php");
?>
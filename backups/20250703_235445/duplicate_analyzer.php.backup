<?php
/**
 * EDS Duplicate Cleaner - Исправленная версия
 * Веб-интерфейс для очистки дубликатов CSS переменных и Phosphor Icons
 */

// Обработка AJAX запросов
if (isset($_POST['action'])) {
	// Включаем отладку
	error_reporting(E_ALL);
	ini_set('display_errors', 1);

	header('Content-Type: application/json; charset=utf-8');

	try {
		$action = $_POST['action'];
		$cleaner = new DuplicateCleaner();

		// Логируем действие
		error_log("DuplicateCleaner: Выполняется действие - " . $action);

		switch ($action) {
			case 'scan':
				error_log("DuplicateCleaner: Начинаем сканирование");
				$result = $cleaner->scanFiles($_POST);
				error_log("DuplicateCleaner: Сканирование завершено, найдено файлов: " . count($result['files']));
				echo json_encode($result, JSON_UNESCAPED_UNICODE);
				break;

			case 'preview':
				error_log("DuplicateCleaner: Превью файла: " . $_POST['file']);
				$result = $cleaner->previewFile($_POST['file']);
				echo json_encode($result, JSON_UNESCAPED_UNICODE);
				break;

			case 'clean':
				error_log("DuplicateCleaner: Очистка файлов");
				$files = json_decode($_POST['files'], true);
				$result = $cleaner->cleanFiles($files);
				error_log("DuplicateCleaner: Очистка завершена, обработано: " . $result['processed_files']);
				echo json_encode($result, JSON_UNESCAPED_UNICODE);
				break;

			case 'backup':
				error_log("DuplicateCleaner: Создание бэкапов");
				$files = json_decode($_POST['files'], true);
				$result = $cleaner->createBackup($files);
				echo json_encode($result, JSON_UNESCAPED_UNICODE);
				break;

			default:
				throw new Exception('Неизвестное действие: ' . $action);
		}

	} catch (Exception $e) {
		error_log("DuplicateCleaner: Ошибка - " . $e->getMessage());
		http_response_code(500);
		echo json_encode(['error' => $e->getMessage()], JSON_UNESCAPED_UNICODE);
	}
	exit;
}

/**
 * Основной класс очистителя дубликатов
 */
class DuplicateCleaner
{
	private $workDir;
	private $backupDir;

	// Паттерны для поиска Phosphor Icons
	private $phosphorPatterns = [
		'/unpkg\.com.*phosphor.*icons/i',
		'/@import.*phosphor/i',
		'/phosphor-icons/i',
		'/<link[^>]*phosphor[^>]*>/i'
	];

	// Эталонные файлы (не удаляем из них дубликаты)
	private $referenceFiles = [
		'main.css',
		'header.css',
		'header.php',
		'index.php'
	];

	public function __construct()
	{
		$this->workDir = getcwd();
		$this->backupDir = $this->workDir . '/backups/' . date('Ymd_His');

		if (!is_dir($this->backupDir)) {
			mkdir($this->backupDir, 0755, true);
		}
	}

	/**
	 * Сканирование файлов на предмет дубликатов
	 */
	public function scanFiles($params)
	{
		$workDir = $params['workDir'] ?? $this->workDir;
		$fileTypes = $params['file_types'] ?? ['css', 'php', 'html'];
		$searchTypes = $params['search_types'] ?? ['phosphor', 'css_vars'];

		$files = $this->findFiles($workDir, $fileTypes);
		$results = [
			'stats' => [
				'total_files' => 0,
				'phosphor_files' => 0,
				'css_var_files' => 0,
				'total_duplicates' => 0
			],
			'files' => []
		];

		foreach ($files as $file) {
			// Пропускаем эталонные файлы
			if (in_array(basename($file), $this->referenceFiles)) {
				continue;
			}

			$analysis = $this->analyzeFile($file, $searchTypes);

			if ($analysis['has_duplicates']) {
				$results['files'][] = [
					'name' => basename($file),
					'path' => $file,
					'phosphor_duplicates' => count($analysis['phosphor_duplicates']),
					'css_duplicates' => count($analysis['css_duplicates'])
				];

				$results['stats']['total_files']++;
				$results['stats']['total_duplicates'] += count($analysis['phosphor_duplicates']) + count($analysis['css_duplicates']);

				if (!empty($analysis['phosphor_duplicates'])) {
					$results['stats']['phosphor_files']++;
				}

				if (!empty($analysis['css_duplicates'])) {
					$results['stats']['css_var_files']++;
				}
			}
		}

		return $results;
	}

	/**
	 * Поиск файлов
	 */
	private function findFiles($dir, $types)
	{
		$files = [];
		$excludeDirs = ['node_modules', '.git', 'vendor', 'bitrix/cache', 'upload', 'backups'];

		$iterator = new RecursiveIteratorIterator(
			new RecursiveDirectoryIterator($dir, RecursiveDirectoryIterator::SKIP_DOTS)
		);

		foreach ($iterator as $file) {
			if ($file->isFile()) {
				$relativePath = str_replace($dir . '/', '', $file->getRealPath());

				// Проверяем исключенные папки
				$skip = false;
				foreach ($excludeDirs as $excludeDir) {
					if (strpos($relativePath, $excludeDir) === 0) {
						$skip = true;
						break;
					}
				}

				if ($skip) continue;

				$extension = strtolower($file->getExtension());
				if (in_array($extension, $types)) {
					$files[] = $file->getRealPath();
				}
			}
		}

		return $files;
	}

	/**
	 * Анализ файла на дубликаты
	 */
	private function analyzeFile($filePath, $searchTypes)
	{
		$content = file_get_contents($filePath);
		$analysis = [
			'has_duplicates' => false,
			'phosphor_duplicates' => [],
			'css_duplicates' => []
		];

		// Поиск Phosphor Icons
		if (in_array('phosphor', $searchTypes)) {
			$analysis['phosphor_duplicates'] = $this->findPhosphorDuplicates($content);
		}

		// Поиск CSS переменных
		if (in_array('css_vars', $searchTypes)) {
			$analysis['css_duplicates'] = $this->findCssVarDuplicates($content);
		}

		$analysis['has_duplicates'] = !empty($analysis['phosphor_duplicates']) || !empty($analysis['css_duplicates']);

		return $analysis;
	}

	/**
	 * Поиск дубликатов Phosphor Icons
	 */
	private function findPhosphorDuplicates($content)
	{
		$duplicates = [];
		$lines = explode("\n", $content);

		foreach ($lines as $lineNum => $line) {
			foreach ($this->phosphorPatterns as $pattern) {
				if (preg_match($pattern, $line)) {
					$duplicates[] = [
						'line' => $lineNum + 1,
						'content' => trim($line)
					];
					break;
				}
			}
		}

		return $duplicates;
	}

	/**
	 * Поиск дубликатов CSS переменных
	 */
	private function findCssVarDuplicates($content)
	{
		$duplicates = [];
		$referenceVars = $this->getReferenceVars();

		// Ищем блоки :root
		if (preg_match_all('/:root\s*\{([^}]+)\}/s', $content, $matches)) {
			foreach ($matches[1] as $match) {
				$lines = explode("\n", $match);

				foreach ($lines as $line) {
					if (preg_match('/^\s*(--[a-zA-Z0-9-]+):\s*([^;]+);/', $line, $varMatch)) {
						$varName = $varMatch[1];
						$varValue = trim($varMatch[2]);

						if (isset($referenceVars[$varName])) {
							$duplicates[] = [
								'name' => $varName,
								'value' => $varValue,
								'line_content' => trim($line)
							];
						}
					}
				}
			}
		}

		return $duplicates;
	}

	/**
	 * Получение эталонных CSS переменных из main.css
	 */
	private function getReferenceVars()
	{
		static $referenceVars = null;

		if ($referenceVars === null) {
			$referenceVars = [];
			$mainCssPath = $this->findFile('main.css');

			if ($mainCssPath && file_exists($mainCssPath)) {
				$content = file_get_contents($mainCssPath);

				if (preg_match('/:root\s*\{([^}]+)\}/s', $content, $matches)) {
					$rootContent = $matches[1];

					if (preg_match_all('/^\s*(--[a-zA-Z0-9-]+):\s*([^;]+);/m', $rootContent, $varMatches, PREG_SET_ORDER)) {
						foreach ($varMatches as $match) {
							$referenceVars[$match[1]] = trim($match[2]);
						}
					}
				}
			}
		}

		return $referenceVars;
	}

	/**
	 * Поиск конкретного файла
	 */
	private function findFile($filename)
	{
		$iterator = new RecursiveIteratorIterator(
			new RecursiveDirectoryIterator($this->workDir, RecursiveDirectoryIterator::SKIP_DOTS)
		);

		foreach ($iterator as $file) {
			if ($file->isFile() && $file->getFilename() === $filename) {
				return $file->getRealPath();
			}
		}

		return null;
	}

	/**
	 * Превью изменений для файла
	 */
	public function previewFile($filePath)
	{
		$analysis = $this->analyzeFile($filePath, ['phosphor', 'css_vars']);

		return [
			'phosphor_changes' => $analysis['phosphor_duplicates'],
			'css_changes' => $analysis['css_duplicates']
		];
	}

	/**
	 * Создание бэкапов
	 */
	public function createBackup($files)
	{
		$backupCount = 0;

		foreach ($files as $file) {
			$backupPath = $this->backupDir . '/' . basename($file['path']) . '.backup';

			if (copy($file['path'], $backupPath)) {
				$backupCount++;
			}
		}

		return [
			'success' => true,
			'backup_count' => $backupCount,
			'backup_dir' => basename($this->backupDir)
		];
	}

	/**
	 * Очистка дубликатов из файлов
	 */
	public function cleanFiles($files)
	{
		// Создаем бэкапы сначала
		$backupResult = $this->createBackup($files);
		if (!$backupResult['success']) {
			return ['success' => false, 'message' => 'Не удалось создать бэкапы'];
		}

		$processedFiles = 0;
		$totalRemoved = 0;
		$errors = [];

		foreach ($files as $file) {
			try {
				$filePath = $file['path'];

				if (!file_exists($filePath)) {
					$errors[] = "Файл не найден: $filePath";
					continue;
				}

				$removed = $this->cleanFile($filePath);

				if ($removed > 0) {
					$processedFiles++;
					$totalRemoved += $removed;
					error_log("DuplicateCleaner: Очищен файл $filePath, удалено: $removed");
				}

			} catch (Exception $e) {
				$errors[] = "Ошибка в файле {$file['path']}: " . $e->getMessage();
				error_log("DuplicateCleaner: Ошибка очистки файла: " . $e->getMessage());
			}
		}

		return [
			'success' => true,
			'processed_files' => $processedFiles,
			'total_removed' => $totalRemoved,
			'errors' => $errors,
			'backup_dir' => basename($this->backupDir)
		];
	}

	/**
	 * Очистка конкретного файла
	 */
	private function cleanFile($filePath)
	{
		$content = file_get_contents($filePath);
		$originalContent = $content;
		$removedCount = 0;

		// Удаляем Phosphor Icons
		$lines = explode("\n", $content);
		$newLines = [];

		foreach ($lines as $line) {
			$shouldRemove = false;

			foreach ($this->phosphorPatterns as $pattern) {
				if (preg_match($pattern, $line)) {
					$shouldRemove = true;
					$removedCount++;
					break;
				}
			}

			if (!$shouldRemove) {
				$newLines[] = $line;
			}
		}

		$content = implode("\n", $newLines);

		// Удаляем дублированные CSS переменные
		$referenceVars = $this->getReferenceVars();

		$content = preg_replace_callback(
			'/:root\s*\{([^}]+)\}/s',
			function($matches) use ($referenceVars, &$removedCount) {
				$rootContent = $matches[1];
				$lines = explode("\n", $rootContent);
				$newLines = [];

				foreach ($lines as $line) {
					if (preg_match('/^\s*(--[a-zA-Z0-9-]+):\s*([^;]+);/', $line, $varMatch)) {
						$varName = $varMatch[1];

						if (isset($referenceVars[$varName])) {
							$removedCount++;
							continue; // Пропускаем эту переменную
						}
					}

					$newLines[] = $line;
				}

				return ':root {' . implode("\n", $newLines) . '}';
			},
			$content
		);

		// Сохраняем только если есть изменения
		if ($content !== $originalContent) {
			file_put_contents($filePath, $content);
		}

		return $removedCount;
	}
}
?>

<!DOCTYPE html>
<html lang="ru">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>EDS Duplicate Cleaner - Очистка дубликатов</title>
	<style>
        :root {
            --primary: #ff2545;
            --success: #28a745;
            --warning: #ffc107;
            --danger: #dc3545;
            --info: #17a2b8;
            --light: #f8f9fa;
            --dark: #343a40;
            --border: #dee2e6;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f5f6fa;
            color: #333;
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: white;
            border-radius: 12px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            text-align: center;
        }

        .header h1 {
            color: var(--primary);
            margin-bottom: 10px;
            font-size: 2.5rem;
        }

        .card {
            background: white;
            border-radius: 12px;
            padding: 25px;
            margin-bottom: 25px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            border-left: 4px solid var(--primary);
        }

        .card h2 {
            color: var(--dark);
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--dark);
        }

        .form-control {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid var(--border);
            border-radius: 8px;
            font-size: 14px;
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary);
        }

        .btn {
            display: inline-block;
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            margin-right: 10px;
            margin-bottom: 10px;
            transition: all 0.3s;
        }

        .btn-primary {
            background: var(--primary);
            color: white;
        }

        .btn-primary:hover {
            background: #e01e3a;
        }

        .btn-success {
            background: var(--success);
            color: white;
        }

        .btn-warning {
            background: var(--warning);
            color: var(--dark);
        }

        .btn-info {
            background: var(--info);
            color: white;
        }

        .checkbox-group {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-top: 10px;
        }

        .checkbox-item {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px 12px;
            background: var(--light);
            border-radius: 6px;
            border: 1px solid var(--border);
        }

        .alert {
            padding: 15px 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid;
        }

        .alert-success {
            background: #d4edda;
            border-color: var(--success);
            color: #155724;
        }

        .alert-danger {
            background: #f8d7da;
            border-color: var(--danger);
            color: #721c24;
        }

        .alert-info {
            background: #d1ecf1;
            border-color: var(--info);
            color: #0c5460;
        }

        .file-list {
            max-height: 400px;
            overflow-y: auto;
            border: 1px solid var(--border);
            border-radius: 8px;
            padding: 15px;
            background: var(--light);
        }

        .file-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 10px;
            margin-bottom: 8px;
            background: white;
            border-radius: 6px;
            border-left: 3px solid var(--primary);
            cursor: pointer;
        }

        .file-item:hover {
            background: #f0f0f0;
        }

        .file-info {
            flex: 1;
        }

        .file-name {
            font-weight: 600;
            color: var(--dark);
        }

        .file-path {
            font-size: 12px;
            color: #666;
            margin-top: 2px;
        }

        .file-stats {
            font-size: 12px;
            color: var(--primary);
            margin-left: 15px;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }

        .stat-card {
            background: linear-gradient(135deg, var(--primary), #ff6b8a);
            color: white;
            padding: 20px;
            border-radius: 12px;
            text-align: center;
        }

        .stat-number {
            font-size: 2.5rem;
            font-weight: bold;
            display: block;
        }

        .stat-label {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        .results-section {
            display: none;
        }

        .results-section.show {
            display: block;
        }

        .loading {
            display: none;
            text-align: center;
            padding: 40px;
        }

        .loading.show {
            display: block;
        }

        .spinner {
            border: 4px solid var(--light);
            border-top: 4px solid var(--primary);
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .code-preview {
            background: #2d3748;
            color: #e2e8f0;
            padding: 15px;
            border-radius: 8px;
            font-family: 'Courier New', monospace;
            font-size: 13px;
            line-height: 1.4;
            max-height: 300px;
            overflow-y: auto;
            margin: 10px 0;
        }

        .diff-removed {
            background: rgba(220, 53, 69, 0.2);
            color: #dc3545;
            padding: 2px 5px;
            margin: 1px 0;
        }

        @media (max-width: 768px) {
            .container {
                padding: 15px;
            }

            .header h1 {
                font-size: 2rem;
            }

            .stats-grid {
                grid-template-columns: 1fr;
            }
        }
	</style>
</head>
<body>
<div class="container">
	<!-- Header -->
	<div class="header">
		<h1>EDS Duplicate Cleaner</h1>
		<p>Интеллектуальная очистка дублированных CSS переменных и Phosphor Icons</p>
	</div>

	<!-- Alerts will be inserted here -->
	<div id="alertContainer"></div>

	<!-- Configuration Section -->
	<div class="card">
		<h2>🔧 Настройка сканирования</h2>

		<form id="scanForm">
			<div class="form-group">
				<label for="workDir">Рабочая директория:</label>
				<input type="text" id="workDir" name="workDir" class="form-control"
				       value="<?php echo htmlspecialchars(getcwd()); ?>"
				       placeholder="Путь к корневой папке проекта">
			</div>

			<div class="form-group">
				<label>Типы файлов для сканирования:</label>
				<div class="checkbox-group">
					<div class="checkbox-item">
						<input type="checkbox" id="scan_css" name="file_types[]" value="css" checked>
						<label for="scan_css">CSS файлы</label>
					</div>
					<div class="checkbox-item">
						<input type="checkbox" id="scan_php" name="file_types[]" value="php" checked>
						<label for="scan_php">PHP файлы</label>
					</div>
					<div class="checkbox-item">
						<input type="checkbox" id="scan_html" name="file_types[]" value="html" checked>
						<label for="scan_html">HTML файлы</label>
					</div>
				</div>
			</div>

			<div class="form-group">
				<label>Что искать:</label>
				<div class="checkbox-group">
					<div class="checkbox-item">
						<input type="checkbox" id="find_phosphor" name="search_types[]" value="phosphor" checked>
						<label for="find_phosphor">Phosphor Icons</label>
					</div>
					<div class="checkbox-item">
						<input type="checkbox" id="find_css_vars" name="search_types[]" value="css_vars" checked>
						<label for="find_css_vars">CSS переменные :root</label>
					</div>
				</div>
			</div>

			<button type="button" class="btn btn-primary" onclick="startScan()">
				🔍 Сканировать проект
			</button>

			<button type="button" class="btn btn-info" onclick="showDebugInfo()">
				🐛 Показать отладку
			</button>
		</form>
	</div>

	<!-- Loading -->
	<div class="loading" id="loadingSection">
		<div class="spinner"></div>
		<h3>Сканирование проекта...</h3>
		<p>Анализируем файлы на предмет дубликатов</p>
	</div>

	<!-- Results Section -->
	<div class="results-section" id="resultsSection">
		<!-- Statistics -->
		<div class="card">
			<h2>📊 Статистика сканирования</h2>
			<div class="stats-grid" id="statsGrid">
				<!-- Stats will be populated by JavaScript -->
			</div>
		</div>

		<!-- Found Files -->
		<div class="card">
			<h2>📁 Найденные файлы с дубликатами</h2>
			<div class="file-list" id="filesList">
				<!-- Files will be populated by JavaScript -->
			</div>
		</div>

		<!-- Preview Section -->
		<div class="card">
			<h2>👀 Предварительный просмотр изменений</h2>
			<div id="previewContent">
				<p>Выберите файл из списка выше для просмотра предлагаемых изменений</p>
			</div>
		</div>

		<!-- Action Buttons -->
		<div class="card">
			<h2>🎯 Действия</h2>

			<div class="alert alert-info">
				<strong>ℹ️ Безопасность:</strong> Перед любыми изменениями автоматически создаются бэкапы в папке <code>backups/</code>
			</div>

			<button type="button" class="btn btn-success" onclick="createBackups()">
				💾 Создать бэкапы
			</button>

			<button type="button" class="btn btn-primary" onclick="cleanDuplicates()">
				🧹 Очистить дубликаты
			</button>
		</div>
	</div>
</div>

<script>
    let scanResults = null;

    async function startScan() {
        console.log('Начинаем сканирование...');

        const form = document.getElementById('scanForm');
        const formData = new FormData(form);
        formData.append('action', 'scan');

        // Показываем процесс загрузки
        showLoading(true);
        showResults(false);

        try {
            console.log('Отправляем запрос на сканирование...');

            const response = await fetch(window.location.href, {
                method: 'POST',
                body: formData
            });

            console.log('Получен ответ:', response.status);

            if (!response.ok) {
                throw new Error(`HTTP ошибка: ${response.status}`);
            }

            const responseText = await response.text();
            console.log('Текст ответа:', responseText.substring(0, 200) + '...');

            let data;
            try {
                data = JSON.parse(responseText);
            } catch (e) {
                console.error('Ошибка парсинга JSON:', e);
                throw new Error('Некорректный ответ от сервера');
            }

            console.log('Данные сканирования:', data);

            if (data.error) {
                throw new Error(data.error);
            }

            scanResults = data;

            // Скрываем загрузку и показываем результаты
            showLoading(false);
            showResults(true);

            populateStats(data.stats);
            populateFilesList(data.files);

            showAlert('success', `Сканирование завершено! Найдено ${data.stats.total_files} файлов с дубликатами.`);

        } catch (error) {
            console.error('Ошибка сканирования:', error);
            showLoading(false);
            showAlert('danger', 'Ошибка при сканировании: ' + error.message);
        }
    }

    async function previewFile(file) {
        try {
            console.log('Загружаем превью для файла:', file.path);

            const formData = new FormData();
            formData.append('action', 'preview');
            formData.append('file', file.path);

            const response = await fetch(window.location.href, {
                method: 'POST',
                body: formData
            });

            const preview = await response.json();
            console.log('Данные превью:', preview);

            const previewContent = document.getElementById('previewContent');
            previewContent.innerHTML = `
                    <h4>📁 ${file.name}</h4>
                    <p><strong>Путь:</strong> ${file.path}</p>

                    ${preview.phosphor_changes && preview.phosphor_changes.length > 0 ? `
                        <h5>🎨 Удаляемые Phosphor Icons (${preview.phosphor_changes.length}):</h5>
                        <div class="code-preview">
                            ${preview.phosphor_changes.map(change =>
                `<div class="diff-removed">- Строка ${change.line}: ${change.content}</div>`
            ).join('')}
                        </div>
                    ` : ''}

                    ${preview.css_changes && preview.css_changes.length > 0 ? `
                        <h5>🎯 Удаляемые CSS переменные (${preview.css_changes.length}):</h5>
                        <div class="code-preview">
                            ${preview.css_changes.map(change =>
                `<div class="diff-removed">- ${change.name}: ${change.value}</div>`
            ).join('')}
                        </div>
                    ` : ''}

                    ${(!preview.phosphor_changes || preview.phosphor_changes.length === 0) &&
            (!preview.css_changes || preview.css_changes.length === 0) ?
                '<p>В этом файле не найдено дубликатов для удаления.</p>' :
                '<p><strong>✅ Файл будет очищен от указанных дубликатов</strong></p>'
            }
                `;

        } catch (error) {
            console.error('Ошибка превью:', error);
            showAlert('danger', 'Ошибка при загрузке превью: ' + error.message);
        }
    }

    async function createBackups() {
        if (!scanResults) {
            showAlert('warning', 'Сначала выполните сканирование');
            return;
        }

        try {
            console.log('Создаем бэкапы для файлов:', scanResults.files);

            const formData = new FormData();
            formData.append('action', 'backup');
            formData.append('files', JSON.stringify(scanResults.files));

            const response = await fetch(window.location.href, {
                method: 'POST',
                body: formData
            });

            const result = await response.json();
            console.log('Результат создания бэкапов:', result);

            if (result.success) {
                showAlert('success', `Бэкапы созданы: ${result.backup_count} файлов в папке ${result.backup_dir}`);
            } else {
                showAlert('danger', 'Ошибка при создании бэкапов: ' + (result.message || 'Неизвестная ошибка'));
            }

        } catch (error) {
            console.error('Ошибка создания бэкапов:', error);
            showAlert('danger', 'Ошибка при создании бэкапов: ' + error.message);
        }
    }

    async function cleanDuplicates() {
        if (!scanResults) {
            showAlert('warning', 'Сначала выполните сканирование');
            return;
        }

        if (!confirm('Вы уверены, что хотите удалить дубликаты? Бэкапы будут созданы автоматически.')) {
            return;
        }

        // Показываем процесс
        showLoading(true);

        try {
            console.log('Очищаем дубликаты в файлах:', scanResults.files);

            const formData = new FormData();
            formData.append('action', 'clean');
            formData.append('files', JSON.stringify(scanResults.files));

            const response = await fetch(window.location.href, {
                method: 'POST',
                body: formData
            });

            const result = await response.json();
            console.log('Результат очистки:', result);

            showLoading(false);

            if (result.success) {
                showAlert('success', `Очистка завершена! Обработано ${result.processed_files} файлов, удалено ${result.total_removed} дубликатов.`);

                // Перезапускаем сканирование через 2 секунды
                setTimeout(() => {
                    console.log('Перезапускаем сканирование после очистки...');
                    startScan();
                }, 2000);
            } else {
                showAlert('danger', 'Ошибка при очистке: ' + (result.message || 'Неизвестная ошибка'));
            }

        } catch (error) {
            console.error('Ошибка очистки:', error);
            showLoading(false);
            showAlert('danger', 'Ошибка при очистке дубликатов: ' + error.message);
        }
    }

    function populateStats(stats) {
        const statsGrid = document.getElementById('statsGrid');
        statsGrid.innerHTML = `
                <div class="stat-card">
                    <span class="stat-number">${stats.total_files}</span>
                    <span class="stat-label">Файлов с дубликатами</span>
                </div>
                <div class="stat-card">
                    <span class="stat-number">${stats.phosphor_files}</span>
                    <span class="stat-label">Phosphor Icons</span>
                </div>
                <div class="stat-card">
                    <span class="stat-number">${stats.css_var_files}</span>
                    <span class="stat-label">CSS переменные</span>
                </div>
                <div class="stat-card">
                    <span class="stat-number">${stats.total_duplicates}</span>
                    <span class="stat-label">Всего дубликатов</span>
                </div>
            `;
    }

    function populateFilesList(files) {
        const filesList = document.getElementById('filesList');
        filesList.innerHTML = '';

        files.forEach(file => {
            const fileItem = document.createElement('div');
            fileItem.className = 'file-item';
            fileItem.innerHTML = `
                    <div class="file-info">
                        <div class="file-name">${file.name}</div>
                        <div class="file-path">${file.path}</div>
                    </div>
                    <div class="file-stats">
                        ${file.phosphor_duplicates || 0} Phosphor + ${file.css_duplicates || 0} CSS
                    </div>
                `;

            fileItem.addEventListener('click', () => previewFile(file));
            filesList.appendChild(fileItem);
        });
    }

    function showLoading(show) {
        document.getElementById('loadingSection').classList.toggle('show', show);
    }

    function showResults(show) {
        document.getElementById('resultsSection').classList.toggle('show', show);
    }

    function showAlert(type, message) {
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type}`;
        alertDiv.innerHTML = message;

        const container = document.getElementById('alertContainer');
        container.appendChild(alertDiv);

        setTimeout(() => {
            alertDiv.remove();
        }, 5000);
    }

    function showDebugInfo() {
        console.log('=== ОТЛАДОЧНАЯ ИНФОРМАЦИЯ ===');
        console.log('scanResults:', scanResults);
        console.log('Текущий URL:', window.location.href);
        console.log('Рабочая директория:', document.getElementById('workDir').value);

        // Тестовый запрос
        const formData = new FormData();
        formData.append('action', 'scan');
        formData.append('workDir', document.getElementById('workDir').value);

        fetch(window.location.href, {
            method: 'POST',
            body: formData
        })
            .then(response => {
                console.log('Тестовый ответ статус:', response.status);
                return response.text();
            })
            .then(text => {
                console.log('Тестовый ответ текст:', text);
                try {
                    const json = JSON.parse(text);
                    console.log('Тестовый ответ JSON:', json);
                } catch(e) {
                    console.log('Не удалось распарсить как JSON');
                }
            })
            .catch(error => {
                console.error('Ошибка тестового запроса:', error);
            });

        showAlert('info', 'Отладочная информация выведена в консоль (F12)');
    }
</script>
</body>
</html>